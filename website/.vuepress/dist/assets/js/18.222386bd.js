(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{188:function(a,e,t){"use strict";t.r(e);var s=t(0),i=Object(s.a)({},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"support-vector-machine-svm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#support-vector-machine-svm","aria-hidden":"true"}},[a._v("#")]),a._v(" Support Vector Machine (SVM)")]),a._v(" "),t("h2",{attrs:{id:"linear-svm-s"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linear-svm-s","aria-hidden":"true"}},[a._v("#")]),a._v(" Linear SVM's")]),a._v(" "),t("p",[a._v("The maximum margin linear classifier is the simplest kind of SVM (Actually called LSVM),")]),a._v(" "),t("h2",{attrs:{id:"non-linear-svm-s"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#non-linear-svm-s","aria-hidden":"true"}},[a._v("#")]),a._v(" Non-Linear SVM's")]),a._v(" "),t("p",[a._v("The original feature space can always be mapped to some higher-dimensional feature space where the training data set is seperable")]),a._v(" "),t("div",{staticClass:"tip custom-block"},[t("p",[a._v("Overfitting can be controlled by soft margin approach")])]),a._v(" "),t("h3",{attrs:{id:"choice-of-kernel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#choice-of-kernel","aria-hidden":"true"}},[a._v("#")]),a._v(" Choice of kernel")]),a._v(" "),t("p",[t("strong",[a._v("Gaussian or polynomial kernel")]),a._v(" is default.")]),a._v(" "),t("p",[t("strong",[a._v("Optimization Criteria")]),a._v(": Hard margin vs soft margin.")]),a._v(" "),t("h3",{attrs:{id:"parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters","aria-hidden":"true"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("p",[a._v("C behaves as a regularization parameter in the SVM")]),a._v(" "),t("div",{staticClass:"warning custom-block"},[t("p",[a._v("Low c -> Large margin, misclassification\nLarge c -> Small margin, high precision")])]),a._v(" "),t("p",[a._v("Gamma parameter defines how far the influence of the simple training example reaches")]),a._v(" "),t("div",{staticClass:"warning custom-block"},[t("p",[a._v("High gamma -> Close reach\nLow gamma -> far reach")])]),a._v(" "),t("div",{staticClass:"tip custom-block"},[t("p",[a._v("Use a for loop to test different values of c and gamma to make sure selecting a good c value")])]),a._v(" "),t("h2",{attrs:{id:"python-example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python-example","aria-hidden":"true"}},[a._v("#")]),a._v(" Python example")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import matplotlib.pyplot as plt\nfrom sklearn import datasets, svm, metrics\n\niris = datasets.load_iris()\ndigits = dataset.load_digits()\n\n# images attribute of the dataset 8x8\nimages_and_labels = list(zip(digits.images, digits.target))\n\nfor index, (image, label) in enumerate(images_and_labels[:4]):\n  plt.subplot(2, 4, index+1)\n  plt.axis('off')\n  plt.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n  plt.title(\"Training %i\" % label)\n\n\n\n\n")])])])])},[],!1,null,null,null);e.default=i.exports}}]);